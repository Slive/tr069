package com.genew.nms.tr069.model.struct;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.genew.nms.tr069.model.AbstractMethod;
import com.genew.nms.tr069.model.SoapMessageModel;


/**
 * @author Slive
 */
public class ParameterList extends AbstractStruct
{
	private static final long serialVersionUID = 9119333307832052200L;
	private static final String ParameterListNode = "ParameterList";
	private static final String ParameterValueStructNode = "ParameterValueStruct";
	private static final String NameNode = "Name";
	private static final String ValueNode = "Value";
	
	// Intert网关必备
	public static final String SpecVesion = "InternetGatewayDevice.DeviceInfo.SpecVersion";
	public static final String HardwareVersion = "InternetGatewayDevice.DeviceInfo.HardwareVersion";
	public static final String SoftwareVesion = "InternetGatewayDevice.DeviceInfo.SoftwareVesion";
	public static final String ProvisioningCode = "InternetGatewayDevice.DeviceInfo.ProvisioningCode";
	public static final String ConnectionRequestURL = "InternetGatewayDevice.MamangementServer.ConnectionRequestURL";
	public static final String ParameterKey = "InternetGatewayDevice.MamangementServer.ParameterKey";
	
	// TODO??
	public static final String ExternalIPAddress = "InternetGatewayDevice.WANDevice.{i}WANConnectionDevice.{j}.WAN{***}Connection.{k}.ExternalIPAddress";
	
	@SuppressWarnings("unchecked")
	private List<ParameterValueStruct> parameterValueStructs;

	
	@SuppressWarnings("unchecked")
	public ParameterList()
	{
		parameterValueStructs = new ArrayList<ParameterValueStruct>();
	}

	@SuppressWarnings("unchecked")
	public List<ParameterValueStruct> getParameterValueStructs()
	{
		return parameterValueStructs;
	}
	
	@SuppressWarnings("unchecked")
	public synchronized void addParamValues(ParameterValueStruct paramValue)
	{
		//TODO 校验？
		if(paramValue == null)
		{
			return ;
		}
		parameterValueStructs.add(paramValue);
	}
	
	public synchronized void clear()
	{
		parameterValueStructs.clear();
	}
	
	@SuppressWarnings("unchecked")
	public synchronized void removeParamValues(ParameterValueStruct paramValue)
	{
		parameterValueStructs.remove(paramValue);
	}


	@SuppressWarnings("unchecked")
	@Override
	public void addThisToBody(Element body, SoapMessageModel soapMessageModel)
	{
            Element paramListElement = soapMessageModel.createElement(ParameterListNode);
            if(parameterValueStructs.size() > 0)
            {
	            AbstractMethod.getArrayTypeAttribute(paramListElement, ParameterValueStructNode, parameterValueStructs.size());
	            for (ParameterValueStruct ps : parameterValueStructs)
	            {
					Element paramenterValueStruct = soapMessageModel.createElement(ParameterValueStructNode);
					Element nameElement = soapMessageModel.createElement(NameNode);
					nameElement.setTextContent(ps.getName());
					Element valueElement = soapMessageModel.createElement(ValueNode);
					valueElement.setTextContent(String.valueOf(ps.getValue()));
					valueElement.setAttribute("xsi:type", "xsd:" + ps.getValueType());
					paramenterValueStruct.appendChild(nameElement);
					paramenterValueStruct.appendChild(valueElement);
					paramListElement.appendChild(paramenterValueStruct);
	            }
            }
            body.appendChild(paramListElement);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void parseBodyOfThis(Element body, SoapMessageModel soapMessageModel)
	{
		Element paramListElement = getRequestChildElement(soapMessageModel, body, ParameterListNode);
        NodeList nodeList = paramListElement.getElementsByTagName(ParameterValueStructNode);
        for(int index = 0;index < nodeList.getLength();index ++)
        {
            Node item = nodeList.item(index);
            if(item instanceof Element)
            {
                Element nameElement = getRequestChildElement(soapMessageModel, (Element)item, NameNode);
                Element valueElement = getRequestChildElement(soapMessageModel, (Element)item, ValueNode);
                
                // TODO区分不同类型
                ParameterValueStruct paramStruct = null;
                String valueAttr = valueElement.getAttribute("xsi:type");
                if(valueAttr == null || valueAttr.trim().equals(""))
                {
                	// 默认为Object方式
                	 paramStruct = new ParameterValueStructObject(
 	                        nameElement.getTextContent(), valueElement.getTextContent());
                }
                else
                {
					String valueType = valueAttr.split("xsd:")[1];
	                if (valueType.equals(ParameterValueStruct.Type_String))
	                {
	                    paramStruct = new ParameterValueStructStr(
	                        nameElement.getTextContent(), valueElement.getTextContent());
	                }
	                else if (valueType.equals(ParameterValueStruct.Type_Int))
	                {
	                    paramStruct = new ParameterValueStructInt(
	                        nameElement.getTextContent(), Integer.valueOf(valueElement.getTextContent()));
	                }
	                else if (valueType.equals(ParameterValueStruct.Type_UnsignedInt))
	                {
	                    paramStruct = new ParameterValueStructUnsignedInt(
	                        nameElement.getTextContent(), Long.valueOf(valueElement.getTextContent()));
	                }
	                else if (valueType.equals(ParameterValueStruct.Type_Boolean))
	                {
	                    paramStruct = new ParameterValueStructBoolean(
	                        nameElement.getTextContent(), Boolean.parseBoolean(valueElement.getTextContent()));
	                }
	                else
	                {
	                    paramStruct = new ParameterValueStructObject(
	                        nameElement.getTextContent(), valueElement.getTextContent());
	                }
                }
                parameterValueStructs.add(paramStruct);
            }                    
        }
	}
	
	
    @Override
    public String toString()
    {
    	StringBuilder sbd = new StringBuilder();
    	sbd.append("ParameterValueStructs:" + Arrays.toString(parameterValueStructs.toArray()));
    	return sbd.toString();
    }
}
